{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport alias2pkg from '@stdlib/namespace-alias2pkg';\nimport startsWith from '@stdlib/string-starts-with';\nimport format from '@stdlib/string-format';\nimport ALIASES from './../data/data.json';\n\n\n// VARIABLES //\n\nvar PKGS; // lazily defined\n\n\n// FUNCTIONS //\n\n/**\n* Resolves package names for all aliases.\n*\n* @private\n* @returns {ArrayArray} pairs of package names and corresponding aliases\n*/\nfunction resolvePackages() {\n\tvar i;\n\tif ( PKGS ) {\n\t\treturn PKGS;\n\t}\n\tPKGS = [];\n\tfor ( i = 0; i < ALIASES.length; i++ ) {\n\t\tPKGS.push( [ alias2pkg( ALIASES[i] ), ALIASES[i] ] );\n\t}\n\treturn PKGS;\n}\n\n\n// MAIN //\n\n/**\n* Returns a list of standard library aliases.\n*\n* @param {string} [namespace] - namespace filter\n* @throws {TypeError} must provide a string\n* @returns {Array} list of aliases\n*\n* @example\n* var list = aliases();\n* // returns [...]\n*\n* @example\n* var list = aliases( '@stdlib/math-base-special' );\n* // returns [...]\n*/\nfunction aliases( namespace ) {\n\tvar pkgs;\n\tvar out;\n\tvar i;\n\tvar p;\n\tif ( arguments.length === 0 ) {\n\t\treturn ALIASES.slice();\n\t}\n\tif ( !isString( namespace ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a string. Value: `%s`.', namespace ) );\n\t}\n\tpkgs = resolvePackages();\n\tout = [];\n\tfor ( i = 0; i < pkgs.length; i++ ) {\n\t\tp = pkgs[ i ];\n\t\tif ( p[ 0 ] && startsWith( p[ 0 ], namespace ) ) {\n\t\t\tout.push( p[1] );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default aliases;\n"],"names":["PKGS","resolvePackages","i","ALIASES","length","push","alias2pkg","aliases","namespace","pkgs","out","p","arguments","slice","isString","TypeError","format","startsWith"],"mappings":";;iYA+BIA,4ttDAWJ,SAASC,IACR,IAAIC,EACJ,GAAKF,EACJ,OAAOA,EAGR,IADAA,EAAO,GACDE,EAAI,EAAGA,EAAIC,EAAQC,OAAQF,IAChCF,EAAKK,KAAM,CAAEC,EAAWH,EAAQD,IAAMC,EAAQD,KAE/C,OAAOF,CACR,CAoBA,SAASO,EAASC,GACjB,IAAIC,EACAC,EACAR,EACAS,EACJ,GAA0B,IAArBC,UAAUR,OACd,OAAOD,EAAQU,QAEhB,IAAMC,EAAUN,GACf,MAAM,IAAIO,UAAWC,EAAQ,wDAAyDR,IAIvF,IAFAC,EAAOR,IACPS,EAAM,GACAR,EAAI,EAAGA,EAAIO,EAAKL,OAAQF,KAC7BS,EAAIF,EAAMP,IACF,IAAOe,EAAYN,EAAG,GAAKH,IAClCE,EAAIL,KAAMM,EAAE,IAGd,OAAOD,CACR"}